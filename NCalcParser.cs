//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.7.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from d:\Users\Admin\Documents\komodo\SSM\ss\app\NCalc2\grammer\NCalc.g by ANTLR 4.7.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419


using System.Globalization;
using NCalc.Domain;

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.7.1")]
[System.CLSCompliant(false)]
public partial class NCalcParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, T__16=17, 
		T__17=18, T__18=19, T__19=20, T__20=21, T__21=22, T__22=23, T__23=24, 
		T__24=25, T__25=26, T__26=27, T__27=28, T__28=29, T__29=30, TRUE=31, FALSE=32, 
		ID=33, FLOAT=34, INTEGER=35, STRING=36, DATETIME=37, NAME=38, E=39, WS=40;
	public const int
		RULE_ncalcExpression = 0, RULE_logicalExpression = 1, RULE_conditionalExpression = 2, 
		RULE_booleanExpression = 3, RULE_relationalExpression = 4, RULE_shiftExpression = 5, 
		RULE_additiveExpression = 6, RULE_multiplicativeExpression = 7, RULE_unaryExpression = 8, 
		RULE_primaryExpression = 9, RULE_value = 10, RULE_identifier = 11, RULE_expressionList = 12, 
		RULE_arguments = 13;
	public static readonly string[] ruleNames = {
		"ncalcExpression", "logicalExpression", "conditionalExpression", "booleanExpression", 
		"relationalExpression", "shiftExpression", "additiveExpression", "multiplicativeExpression", 
		"unaryExpression", "primaryExpression", "value", "identifier", "expressionList", 
		"arguments"
	};

	private static readonly string[] _LiteralNames = {
		null, "'?'", "':'", "'&&'", "'and'", "'||'", "'or'", "'&'", "'|'", "'^'", 
		"'=='", "'='", "'!='", "'<>'", "'<'", "'<='", "'>'", "'>='", "'<<'", "'>>'", 
		"'+'", "'-'", "'*'", "'/'", "'%'", "'!'", "'not'", "'~'", "'('", "')'", 
		"','", "'true'", "'false'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, "TRUE", "FALSE", "ID", "FLOAT", 
		"INTEGER", "STRING", "DATETIME", "NAME", "E", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "NCalc.g"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static NCalcParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}


	private const char BS = '\\';
	private static NumberFormatInfo numberFormatInfo = new NumberFormatInfo();

	private string extractString(string text) {
	    
	    StringBuilder sb = new StringBuilder(text);
	    int startIndex = 1; // Skip initial quote
	    int slashIndex = -1;

	    while ((slashIndex = sb.ToString().IndexOf(BS, startIndex)) != -1)
	    {
	        char escapeType = sb[slashIndex + 1];
	        switch (escapeType)
	        {
	            case 'u':
	              string hcode = String.Concat(sb[slashIndex+4], sb[slashIndex+5]);
	              string lcode = String.Concat(sb[slashIndex+2], sb[slashIndex+3]);
	              char unicodeChar = Encoding.Unicode.GetChars(new byte[] { System.Convert.ToByte(hcode, 16), System.Convert.ToByte(lcode, 16)} )[0];
	              sb.Remove(slashIndex, 6).Insert(slashIndex, unicodeChar); 
	              break;
	            case 'n': sb.Remove(slashIndex, 2).Insert(slashIndex, '\n'); break;
	            case 'r': sb.Remove(slashIndex, 2).Insert(slashIndex, '\r'); break;
	            case 't': sb.Remove(slashIndex, 2).Insert(slashIndex, '\t'); break;
	            case '\'': sb.Remove(slashIndex, 2).Insert(slashIndex, '\''); break;
	            case '\\': sb.Remove(slashIndex, 2).Insert(slashIndex, '\\'); break;
	            default: throw new FailedPredicateException(this,"Unvalid escape sequence: \\" + escapeType);
	        }

	        startIndex = slashIndex + 1;

	    }

	    sb.Remove(0, 1);
	    sb.Remove(sb.Length - 1, 1);

	    return sb.ToString();
	}

	public List<string> Errors { get; set; }

		public NCalcParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public NCalcParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}
	public partial class NcalcExpressionContext : ParserRuleContext {
		public LogicalExpression val;
		public LogicalExpressionContext _logicalExpression;
		public LogicalExpressionContext logicalExpression() {
			return GetRuleContext<LogicalExpressionContext>(0);
		}
		public ITerminalNode Eof() { return GetToken(NCalcParser.Eof, 0); }
		public NcalcExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ncalcExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			INCalcListener typedListener = listener as INCalcListener;
			if (typedListener != null) typedListener.EnterNcalcExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			INCalcListener typedListener = listener as INCalcListener;
			if (typedListener != null) typedListener.ExitNcalcExpression(this);
		}
	}

	[RuleVersion(0)]
	public NcalcExpressionContext ncalcExpression() {
		NcalcExpressionContext _localctx = new NcalcExpressionContext(Context, State);
		EnterRule(_localctx, 0, RULE_ncalcExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 28; _localctx._logicalExpression = logicalExpression();
			State = 29; Match(Eof);
			_localctx.val =  _localctx._logicalExpression.val; 
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LogicalExpressionContext : ParserRuleContext {
		public LogicalExpression val;
		public ConditionalExpressionContext left;
		public ConditionalExpressionContext middle;
		public ConditionalExpressionContext right;
		public ConditionalExpressionContext[] conditionalExpression() {
			return GetRuleContexts<ConditionalExpressionContext>();
		}
		public ConditionalExpressionContext conditionalExpression(int i) {
			return GetRuleContext<ConditionalExpressionContext>(i);
		}
		public ITerminalNode[] WS() { return GetTokens(NCalcParser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(NCalcParser.WS, i);
		}
		public LogicalExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_logicalExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			INCalcListener typedListener = listener as INCalcListener;
			if (typedListener != null) typedListener.EnterLogicalExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			INCalcListener typedListener = listener as INCalcListener;
			if (typedListener != null) typedListener.ExitLogicalExpression(this);
		}
	}

	[RuleVersion(0)]
	public LogicalExpressionContext logicalExpression() {
		LogicalExpressionContext _localctx = new LogicalExpressionContext(Context, State);
		EnterRule(_localctx, 2, RULE_logicalExpression);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 32; _localctx.left = conditionalExpression();
			 _localctx.val =  _localctx.left.val; 
			State = 64;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,4,Context) ) {
			case 1:
				{
				State = 37;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==WS) {
					{
					{
					State = 34; Match(WS);
					}
					}
					State = 39;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 40; Match(T__0);
				State = 44;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,1,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 41; Match(WS);
						}
						} 
					}
					State = 46;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,1,Context);
				}
				State = 47; _localctx.middle = conditionalExpression();
				State = 51;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==WS) {
					{
					{
					State = 48; Match(WS);
					}
					}
					State = 53;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 54; Match(T__1);
				State = 58;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,3,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 55; Match(WS);
						}
						} 
					}
					State = 60;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,3,Context);
				}
				State = 61; _localctx.right = conditionalExpression();
				 _localctx.val =  new TernaryExpression(_localctx.left.val, _localctx.middle.val, _localctx.right.val); 
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConditionalExpressionContext : ParserRuleContext {
		public LogicalExpression val;
		public BooleanExpressionContext left;
		public BooleanExpressionContext right;
		public BooleanExpressionContext[] booleanExpression() {
			return GetRuleContexts<BooleanExpressionContext>();
		}
		public BooleanExpressionContext booleanExpression(int i) {
			return GetRuleContext<BooleanExpressionContext>(i);
		}
		public ConditionalExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_conditionalExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			INCalcListener typedListener = listener as INCalcListener;
			if (typedListener != null) typedListener.EnterConditionalExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			INCalcListener typedListener = listener as INCalcListener;
			if (typedListener != null) typedListener.ExitConditionalExpression(this);
		}
	}

	[RuleVersion(0)]
	public ConditionalExpressionContext conditionalExpression() {
		ConditionalExpressionContext _localctx = new ConditionalExpressionContext(Context, State);
		EnterRule(_localctx, 4, RULE_conditionalExpression);

		BinaryExpressionType type = BinaryExpressionType.Unknown;

		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 66; _localctx.left = booleanExpression();
			 _localctx.val =  _localctx.left.val; 
			State = 79;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__2) | (1L << T__3) | (1L << T__4) | (1L << T__5))) != 0)) {
				{
				{
				State = 72;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case T__2:
				case T__3:
					{
					State = 68;
					_la = TokenStream.LA(1);
					if ( !(_la==T__2 || _la==T__3) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					 type = BinaryExpressionType.And; 
					}
					break;
				case T__4:
				case T__5:
					{
					State = 70;
					_la = TokenStream.LA(1);
					if ( !(_la==T__4 || _la==T__5) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					 type = BinaryExpressionType.Or; 
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 74; _localctx.right = booleanExpression();
				 _localctx.val =  new BinaryExpression(type, _localctx.val, _localctx.right.val); 
				}
				}
				State = 81;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BooleanExpressionContext : ParserRuleContext {
		public LogicalExpression val;
		public RelationalExpressionContext left;
		public RelationalExpressionContext right;
		public RelationalExpressionContext[] relationalExpression() {
			return GetRuleContexts<RelationalExpressionContext>();
		}
		public RelationalExpressionContext relationalExpression(int i) {
			return GetRuleContext<RelationalExpressionContext>(i);
		}
		public BooleanExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_booleanExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			INCalcListener typedListener = listener as INCalcListener;
			if (typedListener != null) typedListener.EnterBooleanExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			INCalcListener typedListener = listener as INCalcListener;
			if (typedListener != null) typedListener.ExitBooleanExpression(this);
		}
	}

	[RuleVersion(0)]
	public BooleanExpressionContext booleanExpression() {
		BooleanExpressionContext _localctx = new BooleanExpressionContext(Context, State);
		EnterRule(_localctx, 6, RULE_booleanExpression);

		BinaryExpressionType type = BinaryExpressionType.Unknown;

		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 82; _localctx.left = relationalExpression();
			 _localctx.val =  _localctx.left.val; 
			State = 97;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__6) | (1L << T__7) | (1L << T__8))) != 0)) {
				{
				{
				State = 90;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case T__6:
					{
					State = 84; Match(T__6);
					 type = BinaryExpressionType.BitwiseAnd; 
					}
					break;
				case T__7:
					{
					State = 86; Match(T__7);
					 type = BinaryExpressionType.BitwiseOr; 
					}
					break;
				case T__8:
					{
					State = 88; Match(T__8);
					 type = BinaryExpressionType.BitwiseXOr; 
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 92; _localctx.right = relationalExpression();
				 _localctx.val =  new BinaryExpression(type, _localctx.val, _localctx.right.val); 
				}
				}
				State = 99;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RelationalExpressionContext : ParserRuleContext {
		public LogicalExpression val;
		public ShiftExpressionContext left;
		public ShiftExpressionContext right;
		public ShiftExpressionContext[] shiftExpression() {
			return GetRuleContexts<ShiftExpressionContext>();
		}
		public ShiftExpressionContext shiftExpression(int i) {
			return GetRuleContext<ShiftExpressionContext>(i);
		}
		public RelationalExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_relationalExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			INCalcListener typedListener = listener as INCalcListener;
			if (typedListener != null) typedListener.EnterRelationalExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			INCalcListener typedListener = listener as INCalcListener;
			if (typedListener != null) typedListener.ExitRelationalExpression(this);
		}
	}

	[RuleVersion(0)]
	public RelationalExpressionContext relationalExpression() {
		RelationalExpressionContext _localctx = new RelationalExpressionContext(Context, State);
		EnterRule(_localctx, 8, RULE_relationalExpression);

		BinaryExpressionType type = BinaryExpressionType.Unknown;

		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 100; _localctx.left = shiftExpression();
			 _localctx.val =  _localctx.left.val; 
			State = 121;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__9) | (1L << T__10) | (1L << T__11) | (1L << T__12) | (1L << T__13) | (1L << T__14) | (1L << T__15) | (1L << T__16))) != 0)) {
				{
				{
				State = 114;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case T__9:
				case T__10:
					{
					State = 102;
					_la = TokenStream.LA(1);
					if ( !(_la==T__9 || _la==T__10) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					 type = BinaryExpressionType.Equal; 
					}
					break;
				case T__11:
				case T__12:
					{
					State = 104;
					_la = TokenStream.LA(1);
					if ( !(_la==T__11 || _la==T__12) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					 type = BinaryExpressionType.NotEqual; 
					}
					break;
				case T__13:
					{
					State = 106; Match(T__13);
					 type = BinaryExpressionType.Lesser; 
					}
					break;
				case T__14:
					{
					State = 108; Match(T__14);
					 type = BinaryExpressionType.LesserOrEqual; 
					}
					break;
				case T__15:
					{
					State = 110; Match(T__15);
					 type = BinaryExpressionType.Greater; 
					}
					break;
				case T__16:
					{
					State = 112; Match(T__16);
					 type = BinaryExpressionType.GreaterOrEqual; 
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 116; _localctx.right = shiftExpression();
				 _localctx.val =  new BinaryExpression(type, _localctx.val, _localctx.right.val); 
				}
				}
				State = 123;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ShiftExpressionContext : ParserRuleContext {
		public LogicalExpression val;
		public AdditiveExpressionContext left;
		public AdditiveExpressionContext right;
		public AdditiveExpressionContext[] additiveExpression() {
			return GetRuleContexts<AdditiveExpressionContext>();
		}
		public AdditiveExpressionContext additiveExpression(int i) {
			return GetRuleContext<AdditiveExpressionContext>(i);
		}
		public ShiftExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_shiftExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			INCalcListener typedListener = listener as INCalcListener;
			if (typedListener != null) typedListener.EnterShiftExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			INCalcListener typedListener = listener as INCalcListener;
			if (typedListener != null) typedListener.ExitShiftExpression(this);
		}
	}

	[RuleVersion(0)]
	public ShiftExpressionContext shiftExpression() {
		ShiftExpressionContext _localctx = new ShiftExpressionContext(Context, State);
		EnterRule(_localctx, 10, RULE_shiftExpression);

		BinaryExpressionType type = BinaryExpressionType.Unknown;

		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 124; _localctx.left = additiveExpression();
			 _localctx.val =  _localctx.left.val; 
			State = 137;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__17 || _la==T__18) {
				{
				{
				State = 130;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case T__17:
					{
					State = 126; Match(T__17);
					 type = BinaryExpressionType.LeftShift; 
					}
					break;
				case T__18:
					{
					State = 128; Match(T__18);
					 type = BinaryExpressionType.RightShift; 
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 132; _localctx.right = additiveExpression();
				 _localctx.val =  new BinaryExpression(type, _localctx.val, _localctx.right.val); 
				}
				}
				State = 139;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AdditiveExpressionContext : ParserRuleContext {
		public LogicalExpression val;
		public MultiplicativeExpressionContext left;
		public MultiplicativeExpressionContext right;
		public MultiplicativeExpressionContext[] multiplicativeExpression() {
			return GetRuleContexts<MultiplicativeExpressionContext>();
		}
		public MultiplicativeExpressionContext multiplicativeExpression(int i) {
			return GetRuleContext<MultiplicativeExpressionContext>(i);
		}
		public AdditiveExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_additiveExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			INCalcListener typedListener = listener as INCalcListener;
			if (typedListener != null) typedListener.EnterAdditiveExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			INCalcListener typedListener = listener as INCalcListener;
			if (typedListener != null) typedListener.ExitAdditiveExpression(this);
		}
	}

	[RuleVersion(0)]
	public AdditiveExpressionContext additiveExpression() {
		AdditiveExpressionContext _localctx = new AdditiveExpressionContext(Context, State);
		EnterRule(_localctx, 12, RULE_additiveExpression);

		BinaryExpressionType type = BinaryExpressionType.Unknown;

		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 140; _localctx.left = multiplicativeExpression();
			 _localctx.val =  _localctx.left.val; 
			State = 153;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__19 || _la==T__20) {
				{
				{
				State = 146;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case T__19:
					{
					State = 142; Match(T__19);
					 type = BinaryExpressionType.Plus; 
					}
					break;
				case T__20:
					{
					State = 144; Match(T__20);
					 type = BinaryExpressionType.Minus; 
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 148; _localctx.right = multiplicativeExpression();
				 _localctx.val =  new BinaryExpression(type, _localctx.val, _localctx.right.val); 
				}
				}
				State = 155;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MultiplicativeExpressionContext : ParserRuleContext {
		public LogicalExpression val;
		public UnaryExpressionContext left;
		public UnaryExpressionContext right;
		public UnaryExpressionContext[] unaryExpression() {
			return GetRuleContexts<UnaryExpressionContext>();
		}
		public UnaryExpressionContext unaryExpression(int i) {
			return GetRuleContext<UnaryExpressionContext>(i);
		}
		public MultiplicativeExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_multiplicativeExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			INCalcListener typedListener = listener as INCalcListener;
			if (typedListener != null) typedListener.EnterMultiplicativeExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			INCalcListener typedListener = listener as INCalcListener;
			if (typedListener != null) typedListener.ExitMultiplicativeExpression(this);
		}
	}

	[RuleVersion(0)]
	public MultiplicativeExpressionContext multiplicativeExpression() {
		MultiplicativeExpressionContext _localctx = new MultiplicativeExpressionContext(Context, State);
		EnterRule(_localctx, 14, RULE_multiplicativeExpression);

		BinaryExpressionType type = BinaryExpressionType.Unknown;

		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 156; _localctx.left = unaryExpression();
			 _localctx.val =  _localctx.left.val; 
			State = 171;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__21) | (1L << T__22) | (1L << T__23))) != 0)) {
				{
				{
				State = 164;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case T__21:
					{
					State = 158; Match(T__21);
					 type = BinaryExpressionType.Times; 
					}
					break;
				case T__22:
					{
					State = 160; Match(T__22);
					 type = BinaryExpressionType.Div; 
					}
					break;
				case T__23:
					{
					State = 162; Match(T__23);
					 type = BinaryExpressionType.Modulo; 
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 166; _localctx.right = unaryExpression();
				 _localctx.val =  new BinaryExpression(type, _localctx.val, _localctx.right.val); 
				}
				}
				State = 173;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnaryExpressionContext : ParserRuleContext {
		public LogicalExpression val;
		public PrimaryExpressionContext _primaryExpression;
		public PrimaryExpressionContext primaryExpression() {
			return GetRuleContext<PrimaryExpressionContext>(0);
		}
		public ITerminalNode[] WS() { return GetTokens(NCalcParser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(NCalcParser.WS, i);
		}
		public UnaryExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unaryExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			INCalcListener typedListener = listener as INCalcListener;
			if (typedListener != null) typedListener.EnterUnaryExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			INCalcListener typedListener = listener as INCalcListener;
			if (typedListener != null) typedListener.ExitUnaryExpression(this);
		}
	}

	[RuleVersion(0)]
	public UnaryExpressionContext unaryExpression() {
		UnaryExpressionContext _localctx = new UnaryExpressionContext(Context, State);
		EnterRule(_localctx, 16, RULE_unaryExpression);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 177;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==WS) {
				{
				{
				State = 174; Match(WS);
				}
				}
				State = 179;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 195;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__27:
			case TRUE:
			case FALSE:
			case ID:
			case FLOAT:
			case INTEGER:
			case STRING:
			case DATETIME:
			case NAME:
				{
				State = 180; _localctx._primaryExpression = primaryExpression();
				 _localctx.val =  _localctx._primaryExpression.val; 
				}
				break;
			case T__24:
			case T__25:
				{
				State = 183;
				_la = TokenStream.LA(1);
				if ( !(_la==T__24 || _la==T__25) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 184; _localctx._primaryExpression = primaryExpression();
				 _localctx.val =  new UnaryExpression(UnaryExpressionType.Not, _localctx._primaryExpression.val); 
				}
				break;
			case T__26:
				{
				{
				State = 187; Match(T__26);
				}
				State = 188; _localctx._primaryExpression = primaryExpression();
				 _localctx.val =  new UnaryExpression(UnaryExpressionType.BitwiseNot, _localctx._primaryExpression.val); 
				}
				break;
			case T__20:
				{
				State = 191; Match(T__20);
				State = 192; _localctx._primaryExpression = primaryExpression();
				 _localctx.val =  new UnaryExpression(UnaryExpressionType.Negate, _localctx._primaryExpression.val); 
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 200;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,19,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 197; Match(WS);
					}
					} 
				}
				State = 202;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,19,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrimaryExpressionContext : ParserRuleContext {
		public LogicalExpression val;
		public LogicalExpressionContext _logicalExpression;
		public ValueContext expr;
		public IdentifierContext _identifier;
		public ArgumentsContext _arguments;
		public LogicalExpressionContext logicalExpression() {
			return GetRuleContext<LogicalExpressionContext>(0);
		}
		public ValueContext value() {
			return GetRuleContext<ValueContext>(0);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ArgumentsContext arguments() {
			return GetRuleContext<ArgumentsContext>(0);
		}
		public PrimaryExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_primaryExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			INCalcListener typedListener = listener as INCalcListener;
			if (typedListener != null) typedListener.EnterPrimaryExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			INCalcListener typedListener = listener as INCalcListener;
			if (typedListener != null) typedListener.ExitPrimaryExpression(this);
		}
	}

	[RuleVersion(0)]
	public PrimaryExpressionContext primaryExpression() {
		PrimaryExpressionContext _localctx = new PrimaryExpressionContext(Context, State);
		EnterRule(_localctx, 18, RULE_primaryExpression);
		int _la;
		try {
			State = 218;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__27:
				EnterOuterAlt(_localctx, 1);
				{
				State = 203; Match(T__27);
				State = 204; _localctx._logicalExpression = logicalExpression();
				State = 205; Match(T__28);
				 _localctx.val =  _localctx._logicalExpression.val; 
				}
				break;
			case TRUE:
			case FALSE:
			case FLOAT:
			case INTEGER:
			case STRING:
			case DATETIME:
				EnterOuterAlt(_localctx, 2);
				{
				State = 208; _localctx.expr = value();
				 _localctx.val =  _localctx.expr.val; 
				}
				break;
			case ID:
			case NAME:
				EnterOuterAlt(_localctx, 3);
				{
				State = 211; _localctx._identifier = identifier();
				_localctx.val =  (LogicalExpression) _localctx._identifier.val; 
				State = 216;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__27) {
					{
					State = 213; _localctx._arguments = arguments();
					_localctx.val =  new Function(_localctx._identifier.val, (_localctx._arguments.val).ToArray()); 
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ValueContext : ParserRuleContext {
		public ValueExpression val;
		public IToken _FLOAT;
		public IToken _INTEGER;
		public IToken _STRING;
		public IToken _DATETIME;
		public ITerminalNode FLOAT() { return GetToken(NCalcParser.FLOAT, 0); }
		public ITerminalNode INTEGER() { return GetToken(NCalcParser.INTEGER, 0); }
		public ITerminalNode STRING() { return GetToken(NCalcParser.STRING, 0); }
		public ITerminalNode DATETIME() { return GetToken(NCalcParser.DATETIME, 0); }
		public ITerminalNode TRUE() { return GetToken(NCalcParser.TRUE, 0); }
		public ITerminalNode FALSE() { return GetToken(NCalcParser.FALSE, 0); }
		public ValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_value; } }
		public override void EnterRule(IParseTreeListener listener) {
			INCalcListener typedListener = listener as INCalcListener;
			if (typedListener != null) typedListener.EnterValue(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			INCalcListener typedListener = listener as INCalcListener;
			if (typedListener != null) typedListener.ExitValue(this);
		}
	}

	[RuleVersion(0)]
	public ValueContext value() {
		ValueContext _localctx = new ValueContext(Context, State);
		EnterRule(_localctx, 20, RULE_value);
		try {
			State = 232;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case FLOAT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 220; _localctx._FLOAT = Match(FLOAT);
				 _localctx.val =  new ValueExpression(double.Parse((_localctx._FLOAT!=null?_localctx._FLOAT.Text:null), NumberStyles.Float, numberFormatInfo)); 
				}
				break;
			case INTEGER:
				EnterOuterAlt(_localctx, 2);
				{
				State = 222; _localctx._INTEGER = Match(INTEGER);
				 try { _localctx.val =  new ValueExpression(int.Parse((_localctx._INTEGER!=null?_localctx._INTEGER.Text:null))); } catch(System.OverflowException) { _localctx.val =  new ValueExpression(long.Parse((_localctx._INTEGER!=null?_localctx._INTEGER.Text:null))); } 
				}
				break;
			case STRING:
				EnterOuterAlt(_localctx, 3);
				{
				State = 224; _localctx._STRING = Match(STRING);
				 _localctx.val =  new ValueExpression(extractString((_localctx._STRING!=null?_localctx._STRING.Text:null))); 
				}
				break;
			case DATETIME:
				EnterOuterAlt(_localctx, 4);
				{
				State = 226; _localctx._DATETIME = Match(DATETIME);
				 _localctx.val =  new ValueExpression(DateTime.Parse((_localctx._DATETIME!=null?_localctx._DATETIME.Text:null).Substring(1, (_localctx._DATETIME!=null?_localctx._DATETIME.Text:null).Length-2))); 
				}
				break;
			case TRUE:
				EnterOuterAlt(_localctx, 5);
				{
				State = 228; Match(TRUE);
				 _localctx.val =  new ValueExpression(true); 
				}
				break;
			case FALSE:
				EnterOuterAlt(_localctx, 6);
				{
				State = 230; Match(FALSE);
				 _localctx.val =  new ValueExpression(false); 
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentifierContext : ParserRuleContext {
		public Identifier val;
		public IToken _ID;
		public IToken _NAME;
		public ITerminalNode ID() { return GetToken(NCalcParser.ID, 0); }
		public ITerminalNode NAME() { return GetToken(NCalcParser.NAME, 0); }
		public IdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			INCalcListener typedListener = listener as INCalcListener;
			if (typedListener != null) typedListener.EnterIdentifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			INCalcListener typedListener = listener as INCalcListener;
			if (typedListener != null) typedListener.ExitIdentifier(this);
		}
	}

	[RuleVersion(0)]
	public IdentifierContext identifier() {
		IdentifierContext _localctx = new IdentifierContext(Context, State);
		EnterRule(_localctx, 22, RULE_identifier);
		try {
			State = 238;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ID:
				EnterOuterAlt(_localctx, 1);
				{
				State = 234; _localctx._ID = Match(ID);
				 _localctx.val =  new Identifier((_localctx._ID!=null?_localctx._ID.Text:null)); 
				}
				break;
			case NAME:
				EnterOuterAlt(_localctx, 2);
				{
				State = 236; _localctx._NAME = Match(NAME);
				 _localctx.val =  new Identifier((_localctx._NAME!=null?_localctx._NAME.Text:null).Substring(1, (_localctx._NAME!=null?_localctx._NAME.Text:null).Length-2)); 
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionListContext : ParserRuleContext {
		public List<LogicalExpression> val;
		public LogicalExpressionContext first;
		public LogicalExpressionContext follow;
		public LogicalExpressionContext[] logicalExpression() {
			return GetRuleContexts<LogicalExpressionContext>();
		}
		public LogicalExpressionContext logicalExpression(int i) {
			return GetRuleContext<LogicalExpressionContext>(i);
		}
		public ITerminalNode[] WS() { return GetTokens(NCalcParser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(NCalcParser.WS, i);
		}
		public ExpressionListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expressionList; } }
		public override void EnterRule(IParseTreeListener listener) {
			INCalcListener typedListener = listener as INCalcListener;
			if (typedListener != null) typedListener.EnterExpressionList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			INCalcListener typedListener = listener as INCalcListener;
			if (typedListener != null) typedListener.ExitExpressionList(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionListContext expressionList() {
		ExpressionListContext _localctx = new ExpressionListContext(Context, State);
		EnterRule(_localctx, 24, RULE_expressionList);

		List<LogicalExpression> expressions = new List<LogicalExpression>();

		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 240; _localctx.first = logicalExpression();
			expressions.Add(_localctx.first.val);
			State = 260;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__29 || _la==WS) {
				{
				{
				State = 245;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==WS) {
					{
					{
					State = 242; Match(WS);
					}
					}
					State = 247;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 248; Match(T__29);
				State = 252;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,25,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 249; Match(WS);
						}
						} 
					}
					State = 254;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,25,Context);
				}
				State = 255; _localctx.follow = logicalExpression();
				expressions.Add(_localctx.follow.val);
				}
				}
				State = 262;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			 _localctx.val =  expressions; 
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgumentsContext : ParserRuleContext {
		public List<LogicalExpression> val;
		public ExpressionListContext _expressionList;
		public ExpressionListContext expressionList() {
			return GetRuleContext<ExpressionListContext>(0);
		}
		public ArgumentsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arguments; } }
		public override void EnterRule(IParseTreeListener listener) {
			INCalcListener typedListener = listener as INCalcListener;
			if (typedListener != null) typedListener.EnterArguments(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			INCalcListener typedListener = listener as INCalcListener;
			if (typedListener != null) typedListener.ExitArguments(this);
		}
	}

	[RuleVersion(0)]
	public ArgumentsContext arguments() {
		ArgumentsContext _localctx = new ArgumentsContext(Context, State);
		EnterRule(_localctx, 26, RULE_arguments);

		_localctx.val =  new List<LogicalExpression>();

		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 265; Match(T__27);
			State = 269;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__20) | (1L << T__24) | (1L << T__25) | (1L << T__26) | (1L << T__27) | (1L << TRUE) | (1L << FALSE) | (1L << ID) | (1L << FLOAT) | (1L << INTEGER) | (1L << STRING) | (1L << DATETIME) | (1L << NAME) | (1L << WS))) != 0)) {
				{
				State = 266; _localctx._expressionList = expressionList();
				_localctx.val =  _localctx._expressionList.val;
				}
			}

			State = 271; Match(T__28);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '*', '\x114', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', '\t', 
		'\xE', '\x4', '\xF', '\t', '\xF', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', 
		'\x3', '\x2', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\a', '\x3', '&', 
		'\n', '\x3', '\f', '\x3', '\xE', '\x3', ')', '\v', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\a', '\x3', '-', '\n', '\x3', '\f', '\x3', '\xE', '\x3', 
		'\x30', '\v', '\x3', '\x3', '\x3', '\x3', '\x3', '\a', '\x3', '\x34', 
		'\n', '\x3', '\f', '\x3', '\xE', '\x3', '\x37', '\v', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\a', '\x3', ';', '\n', '\x3', '\f', '\x3', '\xE', '\x3', 
		'>', '\v', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x5', '\x3', 
		'\x43', '\n', '\x3', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', 
		'\x4', '\x3', '\x4', '\x3', '\x4', '\x5', '\x4', 'K', '\n', '\x4', '\x3', 
		'\x4', '\x3', '\x4', '\x3', '\x4', '\a', '\x4', 'P', '\n', '\x4', '\f', 
		'\x4', '\xE', '\x4', 'S', '\v', '\x4', '\x3', '\x5', '\x3', '\x5', '\x3', 
		'\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', 
		'\x5', '\x5', '\x5', ']', '\n', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', 
		'\x5', '\a', '\x5', '\x62', '\n', '\x5', '\f', '\x5', '\xE', '\x5', '\x65', 
		'\v', '\x5', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', 
		'\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', 
		'\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x5', 
		'\x6', 'u', '\n', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\a', 
		'\x6', 'z', '\n', '\x6', '\f', '\x6', '\xE', '\x6', '}', '\v', '\x6', 
		'\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', 
		'\a', '\x5', '\a', '\x85', '\n', '\a', '\x3', '\a', '\x3', '\a', '\x3', 
		'\a', '\a', '\a', '\x8A', '\n', '\a', '\f', '\a', '\xE', '\a', '\x8D', 
		'\v', '\a', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', 
		'\b', '\x3', '\b', '\x5', '\b', '\x95', '\n', '\b', '\x3', '\b', '\x3', 
		'\b', '\x3', '\b', '\a', '\b', '\x9A', '\n', '\b', '\f', '\b', '\xE', 
		'\b', '\x9D', '\v', '\b', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', 
		'\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x5', '\t', 
		'\xA7', '\n', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\a', '\t', 
		'\xAC', '\n', '\t', '\f', '\t', '\xE', '\t', '\xAF', '\v', '\t', '\x3', 
		'\n', '\a', '\n', '\xB2', '\n', '\n', '\f', '\n', '\xE', '\n', '\xB5', 
		'\v', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', 
		'\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', 
		'\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x5', 
		'\n', '\xC6', '\n', '\n', '\x3', '\n', '\a', '\n', '\xC9', '\n', '\n', 
		'\f', '\n', '\xE', '\n', '\xCC', '\v', '\n', '\x3', '\v', '\x3', '\v', 
		'\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', 
		'\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', 
		'\x5', '\v', '\xDB', '\n', '\v', '\x5', '\v', '\xDD', '\n', '\v', '\x3', 
		'\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', 
		'\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', 
		'\f', '\x5', '\f', '\xEB', '\n', '\f', '\x3', '\r', '\x3', '\r', '\x3', 
		'\r', '\x3', '\r', '\x5', '\r', '\xF1', '\n', '\r', '\x3', '\xE', '\x3', 
		'\xE', '\x3', '\xE', '\a', '\xE', '\xF6', '\n', '\xE', '\f', '\xE', '\xE', 
		'\xE', '\xF9', '\v', '\xE', '\x3', '\xE', '\x3', '\xE', '\a', '\xE', '\xFD', 
		'\n', '\xE', '\f', '\xE', '\xE', '\xE', '\x100', '\v', '\xE', '\x3', '\xE', 
		'\x3', '\xE', '\x3', '\xE', '\a', '\xE', '\x105', '\n', '\xE', '\f', '\xE', 
		'\xE', '\xE', '\x108', '\v', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', 
		'\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x5', '\xF', '\x110', 
		'\n', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x2', '\x2', '\x10', 
		'\x2', '\x4', '\x6', '\b', '\n', '\f', '\xE', '\x10', '\x12', '\x14', 
		'\x16', '\x18', '\x1A', '\x1C', '\x2', '\a', '\x3', '\x2', '\x5', '\x6', 
		'\x3', '\x2', '\a', '\b', '\x3', '\x2', '\f', '\r', '\x3', '\x2', '\xE', 
		'\xF', '\x3', '\x2', '\x1B', '\x1C', '\x2', '\x12E', '\x2', '\x1E', '\x3', 
		'\x2', '\x2', '\x2', '\x4', '\"', '\x3', '\x2', '\x2', '\x2', '\x6', '\x44', 
		'\x3', '\x2', '\x2', '\x2', '\b', 'T', '\x3', '\x2', '\x2', '\x2', '\n', 
		'\x66', '\x3', '\x2', '\x2', '\x2', '\f', '~', '\x3', '\x2', '\x2', '\x2', 
		'\xE', '\x8E', '\x3', '\x2', '\x2', '\x2', '\x10', '\x9E', '\x3', '\x2', 
		'\x2', '\x2', '\x12', '\xB3', '\x3', '\x2', '\x2', '\x2', '\x14', '\xDC', 
		'\x3', '\x2', '\x2', '\x2', '\x16', '\xEA', '\x3', '\x2', '\x2', '\x2', 
		'\x18', '\xF0', '\x3', '\x2', '\x2', '\x2', '\x1A', '\xF2', '\x3', '\x2', 
		'\x2', '\x2', '\x1C', '\x10B', '\x3', '\x2', '\x2', '\x2', '\x1E', '\x1F', 
		'\x5', '\x4', '\x3', '\x2', '\x1F', ' ', '\a', '\x2', '\x2', '\x3', ' ', 
		'!', '\b', '\x2', '\x1', '\x2', '!', '\x3', '\x3', '\x2', '\x2', '\x2', 
		'\"', '#', '\x5', '\x6', '\x4', '\x2', '#', '\x42', '\b', '\x3', '\x1', 
		'\x2', '$', '&', '\a', '*', '\x2', '\x2', '%', '$', '\x3', '\x2', '\x2', 
		'\x2', '&', ')', '\x3', '\x2', '\x2', '\x2', '\'', '%', '\x3', '\x2', 
		'\x2', '\x2', '\'', '(', '\x3', '\x2', '\x2', '\x2', '(', '*', '\x3', 
		'\x2', '\x2', '\x2', ')', '\'', '\x3', '\x2', '\x2', '\x2', '*', '.', 
		'\a', '\x3', '\x2', '\x2', '+', '-', '\a', '*', '\x2', '\x2', ',', '+', 
		'\x3', '\x2', '\x2', '\x2', '-', '\x30', '\x3', '\x2', '\x2', '\x2', '.', 
		',', '\x3', '\x2', '\x2', '\x2', '.', '/', '\x3', '\x2', '\x2', '\x2', 
		'/', '\x31', '\x3', '\x2', '\x2', '\x2', '\x30', '.', '\x3', '\x2', '\x2', 
		'\x2', '\x31', '\x35', '\x5', '\x6', '\x4', '\x2', '\x32', '\x34', '\a', 
		'*', '\x2', '\x2', '\x33', '\x32', '\x3', '\x2', '\x2', '\x2', '\x34', 
		'\x37', '\x3', '\x2', '\x2', '\x2', '\x35', '\x33', '\x3', '\x2', '\x2', 
		'\x2', '\x35', '\x36', '\x3', '\x2', '\x2', '\x2', '\x36', '\x38', '\x3', 
		'\x2', '\x2', '\x2', '\x37', '\x35', '\x3', '\x2', '\x2', '\x2', '\x38', 
		'<', '\a', '\x4', '\x2', '\x2', '\x39', ';', '\a', '*', '\x2', '\x2', 
		':', '\x39', '\x3', '\x2', '\x2', '\x2', ';', '>', '\x3', '\x2', '\x2', 
		'\x2', '<', ':', '\x3', '\x2', '\x2', '\x2', '<', '=', '\x3', '\x2', '\x2', 
		'\x2', '=', '?', '\x3', '\x2', '\x2', '\x2', '>', '<', '\x3', '\x2', '\x2', 
		'\x2', '?', '@', '\x5', '\x6', '\x4', '\x2', '@', '\x41', '\b', '\x3', 
		'\x1', '\x2', '\x41', '\x43', '\x3', '\x2', '\x2', '\x2', '\x42', '\'', 
		'\x3', '\x2', '\x2', '\x2', '\x42', '\x43', '\x3', '\x2', '\x2', '\x2', 
		'\x43', '\x5', '\x3', '\x2', '\x2', '\x2', '\x44', '\x45', '\x5', '\b', 
		'\x5', '\x2', '\x45', 'Q', '\b', '\x4', '\x1', '\x2', '\x46', 'G', '\t', 
		'\x2', '\x2', '\x2', 'G', 'K', '\b', '\x4', '\x1', '\x2', 'H', 'I', '\t', 
		'\x3', '\x2', '\x2', 'I', 'K', '\b', '\x4', '\x1', '\x2', 'J', '\x46', 
		'\x3', '\x2', '\x2', '\x2', 'J', 'H', '\x3', '\x2', '\x2', '\x2', 'K', 
		'L', '\x3', '\x2', '\x2', '\x2', 'L', 'M', '\x5', '\b', '\x5', '\x2', 
		'M', 'N', '\b', '\x4', '\x1', '\x2', 'N', 'P', '\x3', '\x2', '\x2', '\x2', 
		'O', 'J', '\x3', '\x2', '\x2', '\x2', 'P', 'S', '\x3', '\x2', '\x2', '\x2', 
		'Q', 'O', '\x3', '\x2', '\x2', '\x2', 'Q', 'R', '\x3', '\x2', '\x2', '\x2', 
		'R', '\a', '\x3', '\x2', '\x2', '\x2', 'S', 'Q', '\x3', '\x2', '\x2', 
		'\x2', 'T', 'U', '\x5', '\n', '\x6', '\x2', 'U', '\x63', '\b', '\x5', 
		'\x1', '\x2', 'V', 'W', '\a', '\t', '\x2', '\x2', 'W', ']', '\b', '\x5', 
		'\x1', '\x2', 'X', 'Y', '\a', '\n', '\x2', '\x2', 'Y', ']', '\b', '\x5', 
		'\x1', '\x2', 'Z', '[', '\a', '\v', '\x2', '\x2', '[', ']', '\b', '\x5', 
		'\x1', '\x2', '\\', 'V', '\x3', '\x2', '\x2', '\x2', '\\', 'X', '\x3', 
		'\x2', '\x2', '\x2', '\\', 'Z', '\x3', '\x2', '\x2', '\x2', ']', '^', 
		'\x3', '\x2', '\x2', '\x2', '^', '_', '\x5', '\n', '\x6', '\x2', '_', 
		'`', '\b', '\x5', '\x1', '\x2', '`', '\x62', '\x3', '\x2', '\x2', '\x2', 
		'\x61', '\\', '\x3', '\x2', '\x2', '\x2', '\x62', '\x65', '\x3', '\x2', 
		'\x2', '\x2', '\x63', '\x61', '\x3', '\x2', '\x2', '\x2', '\x63', '\x64', 
		'\x3', '\x2', '\x2', '\x2', '\x64', '\t', '\x3', '\x2', '\x2', '\x2', 
		'\x65', '\x63', '\x3', '\x2', '\x2', '\x2', '\x66', 'g', '\x5', '\f', 
		'\a', '\x2', 'g', '{', '\b', '\x6', '\x1', '\x2', 'h', 'i', '\t', '\x4', 
		'\x2', '\x2', 'i', 'u', '\b', '\x6', '\x1', '\x2', 'j', 'k', '\t', '\x5', 
		'\x2', '\x2', 'k', 'u', '\b', '\x6', '\x1', '\x2', 'l', 'm', '\a', '\x10', 
		'\x2', '\x2', 'm', 'u', '\b', '\x6', '\x1', '\x2', 'n', 'o', '\a', '\x11', 
		'\x2', '\x2', 'o', 'u', '\b', '\x6', '\x1', '\x2', 'p', 'q', '\a', '\x12', 
		'\x2', '\x2', 'q', 'u', '\b', '\x6', '\x1', '\x2', 'r', 's', '\a', '\x13', 
		'\x2', '\x2', 's', 'u', '\b', '\x6', '\x1', '\x2', 't', 'h', '\x3', '\x2', 
		'\x2', '\x2', 't', 'j', '\x3', '\x2', '\x2', '\x2', 't', 'l', '\x3', '\x2', 
		'\x2', '\x2', 't', 'n', '\x3', '\x2', '\x2', '\x2', 't', 'p', '\x3', '\x2', 
		'\x2', '\x2', 't', 'r', '\x3', '\x2', '\x2', '\x2', 'u', 'v', '\x3', '\x2', 
		'\x2', '\x2', 'v', 'w', '\x5', '\f', '\a', '\x2', 'w', 'x', '\b', '\x6', 
		'\x1', '\x2', 'x', 'z', '\x3', '\x2', '\x2', '\x2', 'y', 't', '\x3', '\x2', 
		'\x2', '\x2', 'z', '}', '\x3', '\x2', '\x2', '\x2', '{', 'y', '\x3', '\x2', 
		'\x2', '\x2', '{', '|', '\x3', '\x2', '\x2', '\x2', '|', '\v', '\x3', 
		'\x2', '\x2', '\x2', '}', '{', '\x3', '\x2', '\x2', '\x2', '~', '\x7F', 
		'\x5', '\xE', '\b', '\x2', '\x7F', '\x8B', '\b', '\a', '\x1', '\x2', '\x80', 
		'\x81', '\a', '\x14', '\x2', '\x2', '\x81', '\x85', '\b', '\a', '\x1', 
		'\x2', '\x82', '\x83', '\a', '\x15', '\x2', '\x2', '\x83', '\x85', '\b', 
		'\a', '\x1', '\x2', '\x84', '\x80', '\x3', '\x2', '\x2', '\x2', '\x84', 
		'\x82', '\x3', '\x2', '\x2', '\x2', '\x85', '\x86', '\x3', '\x2', '\x2', 
		'\x2', '\x86', '\x87', '\x5', '\xE', '\b', '\x2', '\x87', '\x88', '\b', 
		'\a', '\x1', '\x2', '\x88', '\x8A', '\x3', '\x2', '\x2', '\x2', '\x89', 
		'\x84', '\x3', '\x2', '\x2', '\x2', '\x8A', '\x8D', '\x3', '\x2', '\x2', 
		'\x2', '\x8B', '\x89', '\x3', '\x2', '\x2', '\x2', '\x8B', '\x8C', '\x3', 
		'\x2', '\x2', '\x2', '\x8C', '\r', '\x3', '\x2', '\x2', '\x2', '\x8D', 
		'\x8B', '\x3', '\x2', '\x2', '\x2', '\x8E', '\x8F', '\x5', '\x10', '\t', 
		'\x2', '\x8F', '\x9B', '\b', '\b', '\x1', '\x2', '\x90', '\x91', '\a', 
		'\x16', '\x2', '\x2', '\x91', '\x95', '\b', '\b', '\x1', '\x2', '\x92', 
		'\x93', '\a', '\x17', '\x2', '\x2', '\x93', '\x95', '\b', '\b', '\x1', 
		'\x2', '\x94', '\x90', '\x3', '\x2', '\x2', '\x2', '\x94', '\x92', '\x3', 
		'\x2', '\x2', '\x2', '\x95', '\x96', '\x3', '\x2', '\x2', '\x2', '\x96', 
		'\x97', '\x5', '\x10', '\t', '\x2', '\x97', '\x98', '\b', '\b', '\x1', 
		'\x2', '\x98', '\x9A', '\x3', '\x2', '\x2', '\x2', '\x99', '\x94', '\x3', 
		'\x2', '\x2', '\x2', '\x9A', '\x9D', '\x3', '\x2', '\x2', '\x2', '\x9B', 
		'\x99', '\x3', '\x2', '\x2', '\x2', '\x9B', '\x9C', '\x3', '\x2', '\x2', 
		'\x2', '\x9C', '\xF', '\x3', '\x2', '\x2', '\x2', '\x9D', '\x9B', '\x3', 
		'\x2', '\x2', '\x2', '\x9E', '\x9F', '\x5', '\x12', '\n', '\x2', '\x9F', 
		'\xAD', '\b', '\t', '\x1', '\x2', '\xA0', '\xA1', '\a', '\x18', '\x2', 
		'\x2', '\xA1', '\xA7', '\b', '\t', '\x1', '\x2', '\xA2', '\xA3', '\a', 
		'\x19', '\x2', '\x2', '\xA3', '\xA7', '\b', '\t', '\x1', '\x2', '\xA4', 
		'\xA5', '\a', '\x1A', '\x2', '\x2', '\xA5', '\xA7', '\b', '\t', '\x1', 
		'\x2', '\xA6', '\xA0', '\x3', '\x2', '\x2', '\x2', '\xA6', '\xA2', '\x3', 
		'\x2', '\x2', '\x2', '\xA6', '\xA4', '\x3', '\x2', '\x2', '\x2', '\xA7', 
		'\xA8', '\x3', '\x2', '\x2', '\x2', '\xA8', '\xA9', '\x5', '\x12', '\n', 
		'\x2', '\xA9', '\xAA', '\b', '\t', '\x1', '\x2', '\xAA', '\xAC', '\x3', 
		'\x2', '\x2', '\x2', '\xAB', '\xA6', '\x3', '\x2', '\x2', '\x2', '\xAC', 
		'\xAF', '\x3', '\x2', '\x2', '\x2', '\xAD', '\xAB', '\x3', '\x2', '\x2', 
		'\x2', '\xAD', '\xAE', '\x3', '\x2', '\x2', '\x2', '\xAE', '\x11', '\x3', 
		'\x2', '\x2', '\x2', '\xAF', '\xAD', '\x3', '\x2', '\x2', '\x2', '\xB0', 
		'\xB2', '\a', '*', '\x2', '\x2', '\xB1', '\xB0', '\x3', '\x2', '\x2', 
		'\x2', '\xB2', '\xB5', '\x3', '\x2', '\x2', '\x2', '\xB3', '\xB1', '\x3', 
		'\x2', '\x2', '\x2', '\xB3', '\xB4', '\x3', '\x2', '\x2', '\x2', '\xB4', 
		'\xC5', '\x3', '\x2', '\x2', '\x2', '\xB5', '\xB3', '\x3', '\x2', '\x2', 
		'\x2', '\xB6', '\xB7', '\x5', '\x14', '\v', '\x2', '\xB7', '\xB8', '\b', 
		'\n', '\x1', '\x2', '\xB8', '\xC6', '\x3', '\x2', '\x2', '\x2', '\xB9', 
		'\xBA', '\t', '\x6', '\x2', '\x2', '\xBA', '\xBB', '\x5', '\x14', '\v', 
		'\x2', '\xBB', '\xBC', '\b', '\n', '\x1', '\x2', '\xBC', '\xC6', '\x3', 
		'\x2', '\x2', '\x2', '\xBD', '\xBE', '\a', '\x1D', '\x2', '\x2', '\xBE', 
		'\xBF', '\x5', '\x14', '\v', '\x2', '\xBF', '\xC0', '\b', '\n', '\x1', 
		'\x2', '\xC0', '\xC6', '\x3', '\x2', '\x2', '\x2', '\xC1', '\xC2', '\a', 
		'\x17', '\x2', '\x2', '\xC2', '\xC3', '\x5', '\x14', '\v', '\x2', '\xC3', 
		'\xC4', '\b', '\n', '\x1', '\x2', '\xC4', '\xC6', '\x3', '\x2', '\x2', 
		'\x2', '\xC5', '\xB6', '\x3', '\x2', '\x2', '\x2', '\xC5', '\xB9', '\x3', 
		'\x2', '\x2', '\x2', '\xC5', '\xBD', '\x3', '\x2', '\x2', '\x2', '\xC5', 
		'\xC1', '\x3', '\x2', '\x2', '\x2', '\xC6', '\xCA', '\x3', '\x2', '\x2', 
		'\x2', '\xC7', '\xC9', '\a', '*', '\x2', '\x2', '\xC8', '\xC7', '\x3', 
		'\x2', '\x2', '\x2', '\xC9', '\xCC', '\x3', '\x2', '\x2', '\x2', '\xCA', 
		'\xC8', '\x3', '\x2', '\x2', '\x2', '\xCA', '\xCB', '\x3', '\x2', '\x2', 
		'\x2', '\xCB', '\x13', '\x3', '\x2', '\x2', '\x2', '\xCC', '\xCA', '\x3', 
		'\x2', '\x2', '\x2', '\xCD', '\xCE', '\a', '\x1E', '\x2', '\x2', '\xCE', 
		'\xCF', '\x5', '\x4', '\x3', '\x2', '\xCF', '\xD0', '\a', '\x1F', '\x2', 
		'\x2', '\xD0', '\xD1', '\b', '\v', '\x1', '\x2', '\xD1', '\xDD', '\x3', 
		'\x2', '\x2', '\x2', '\xD2', '\xD3', '\x5', '\x16', '\f', '\x2', '\xD3', 
		'\xD4', '\b', '\v', '\x1', '\x2', '\xD4', '\xDD', '\x3', '\x2', '\x2', 
		'\x2', '\xD5', '\xD6', '\x5', '\x18', '\r', '\x2', '\xD6', '\xDA', '\b', 
		'\v', '\x1', '\x2', '\xD7', '\xD8', '\x5', '\x1C', '\xF', '\x2', '\xD8', 
		'\xD9', '\b', '\v', '\x1', '\x2', '\xD9', '\xDB', '\x3', '\x2', '\x2', 
		'\x2', '\xDA', '\xD7', '\x3', '\x2', '\x2', '\x2', '\xDA', '\xDB', '\x3', 
		'\x2', '\x2', '\x2', '\xDB', '\xDD', '\x3', '\x2', '\x2', '\x2', '\xDC', 
		'\xCD', '\x3', '\x2', '\x2', '\x2', '\xDC', '\xD2', '\x3', '\x2', '\x2', 
		'\x2', '\xDC', '\xD5', '\x3', '\x2', '\x2', '\x2', '\xDD', '\x15', '\x3', 
		'\x2', '\x2', '\x2', '\xDE', '\xDF', '\a', '$', '\x2', '\x2', '\xDF', 
		'\xEB', '\b', '\f', '\x1', '\x2', '\xE0', '\xE1', '\a', '%', '\x2', '\x2', 
		'\xE1', '\xEB', '\b', '\f', '\x1', '\x2', '\xE2', '\xE3', '\a', '&', '\x2', 
		'\x2', '\xE3', '\xEB', '\b', '\f', '\x1', '\x2', '\xE4', '\xE5', '\a', 
		'\'', '\x2', '\x2', '\xE5', '\xEB', '\b', '\f', '\x1', '\x2', '\xE6', 
		'\xE7', '\a', '!', '\x2', '\x2', '\xE7', '\xEB', '\b', '\f', '\x1', '\x2', 
		'\xE8', '\xE9', '\a', '\"', '\x2', '\x2', '\xE9', '\xEB', '\b', '\f', 
		'\x1', '\x2', '\xEA', '\xDE', '\x3', '\x2', '\x2', '\x2', '\xEA', '\xE0', 
		'\x3', '\x2', '\x2', '\x2', '\xEA', '\xE2', '\x3', '\x2', '\x2', '\x2', 
		'\xEA', '\xE4', '\x3', '\x2', '\x2', '\x2', '\xEA', '\xE6', '\x3', '\x2', 
		'\x2', '\x2', '\xEA', '\xE8', '\x3', '\x2', '\x2', '\x2', '\xEB', '\x17', 
		'\x3', '\x2', '\x2', '\x2', '\xEC', '\xED', '\a', '#', '\x2', '\x2', '\xED', 
		'\xF1', '\b', '\r', '\x1', '\x2', '\xEE', '\xEF', '\a', '(', '\x2', '\x2', 
		'\xEF', '\xF1', '\b', '\r', '\x1', '\x2', '\xF0', '\xEC', '\x3', '\x2', 
		'\x2', '\x2', '\xF0', '\xEE', '\x3', '\x2', '\x2', '\x2', '\xF1', '\x19', 
		'\x3', '\x2', '\x2', '\x2', '\xF2', '\xF3', '\x5', '\x4', '\x3', '\x2', 
		'\xF3', '\x106', '\b', '\xE', '\x1', '\x2', '\xF4', '\xF6', '\a', '*', 
		'\x2', '\x2', '\xF5', '\xF4', '\x3', '\x2', '\x2', '\x2', '\xF6', '\xF9', 
		'\x3', '\x2', '\x2', '\x2', '\xF7', '\xF5', '\x3', '\x2', '\x2', '\x2', 
		'\xF7', '\xF8', '\x3', '\x2', '\x2', '\x2', '\xF8', '\xFA', '\x3', '\x2', 
		'\x2', '\x2', '\xF9', '\xF7', '\x3', '\x2', '\x2', '\x2', '\xFA', '\xFE', 
		'\a', ' ', '\x2', '\x2', '\xFB', '\xFD', '\a', '*', '\x2', '\x2', '\xFC', 
		'\xFB', '\x3', '\x2', '\x2', '\x2', '\xFD', '\x100', '\x3', '\x2', '\x2', 
		'\x2', '\xFE', '\xFC', '\x3', '\x2', '\x2', '\x2', '\xFE', '\xFF', '\x3', 
		'\x2', '\x2', '\x2', '\xFF', '\x101', '\x3', '\x2', '\x2', '\x2', '\x100', 
		'\xFE', '\x3', '\x2', '\x2', '\x2', '\x101', '\x102', '\x5', '\x4', '\x3', 
		'\x2', '\x102', '\x103', '\b', '\xE', '\x1', '\x2', '\x103', '\x105', 
		'\x3', '\x2', '\x2', '\x2', '\x104', '\xF7', '\x3', '\x2', '\x2', '\x2', 
		'\x105', '\x108', '\x3', '\x2', '\x2', '\x2', '\x106', '\x104', '\x3', 
		'\x2', '\x2', '\x2', '\x106', '\x107', '\x3', '\x2', '\x2', '\x2', '\x107', 
		'\x109', '\x3', '\x2', '\x2', '\x2', '\x108', '\x106', '\x3', '\x2', '\x2', 
		'\x2', '\x109', '\x10A', '\b', '\xE', '\x1', '\x2', '\x10A', '\x1B', '\x3', 
		'\x2', '\x2', '\x2', '\x10B', '\x10F', '\a', '\x1E', '\x2', '\x2', '\x10C', 
		'\x10D', '\x5', '\x1A', '\xE', '\x2', '\x10D', '\x10E', '\b', '\xF', '\x1', 
		'\x2', '\x10E', '\x110', '\x3', '\x2', '\x2', '\x2', '\x10F', '\x10C', 
		'\x3', '\x2', '\x2', '\x2', '\x10F', '\x110', '\x3', '\x2', '\x2', '\x2', 
		'\x110', '\x111', '\x3', '\x2', '\x2', '\x2', '\x111', '\x112', '\a', 
		'\x1F', '\x2', '\x2', '\x112', '\x1D', '\x3', '\x2', '\x2', '\x2', '\x1E', 
		'\'', '.', '\x35', '<', '\x42', 'J', 'Q', '\\', '\x63', 't', '{', '\x84', 
		'\x8B', '\x94', '\x9B', '\xA6', '\xAD', '\xB3', '\xC5', '\xCA', '\xDA', 
		'\xDC', '\xEA', '\xF0', '\xF7', '\xFE', '\x106', '\x10F',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
